#ifndef FUZZY_LOGIC_{{ model.name }}_H
#define FUZZY_LOGIC_{{ model.name }}_H

#include "definitions_{{ model.name }}.h"

#include "rules_{{ model.name }}.h"
#include "fuzzyInput_{{ model.name }}.h"
#include "fuzzyOutput_{{ model.name }}.h"

//! FUZZY LOGIC STRUCTURE
typedef struct {
	fuzzyInput fInput[N_INPUT_{{ model.name }}];
	fuzzyOutput fOutput[N_OUTPUT_{{ model.name }}];
	builtRule rules[N_RULES_{{ model.name }}];
	double fuzzified[N_INPUT_{{ model.name }} * MAX_N_MF_{{ model.name }}];
	double evaluated[N_OUTPUT_{{ model.name }} * MAX_N_MF_{{ model.name }}];
} fuzzyLogic_{{ model.name }};

/*! CONSTRUCTOR OF THE FUZZY LOGIC
 *		output			fl			Fuzzy logic to init
 *		input			inputs		Vector of inputs of the logic
 *		input			outputs		Vector of outputs of the logic
 *		input			rules		Vector of rules to add to the logic
 *
 *		return						Flag: -1 if error, 0 otherwise
 */
int createLogic_{{ model.name }}(fuzzyLogic_{{ model.name }} * fl, fuzzyInput_{{ model.name }} * inputs, fuzzyOutput_{{ model.name }} * outputs, rule_{{ model.name }} * r);

/*! FUZZIFY THE INPUTS
 *		input/output	fl					Fuzzy logic
 *		input			inputs				Inputs of the fuzzy logic			
 */
void fuzzify_{{ model.name }}(fuzzyLogic_{{ model.name }} * fl, double * inputs);

/*! EVALUATE THE RULES GIVEN THE FUZZIFIED INPUTS
 *		input/output		fl			Fuzzy logic
 *
 *		return							-1 if smtg went wrong, 0 otherwise
 */
int evaluateRules_{{ model.name }}(fuzzyLogic_{{ model.name }} * fl);

/*! DEFUZZIFY THE EVALUATED RULES
 *		input			fl				Fuzzy logic
 *		output			outputs			Vector of the outputs of the fuzzy control
 *
 *		return							-1 if smtg went wrong, 0 otherwise
 */
int defuzzify_{{ model.name }}(fuzzyLogic_{{ model.name }} * fl, double * outputs);

/*! FIND INPUT INDEX GIVEN NAME
 *		input			fl				Fuzzy logic
 *		input			name			Name of the input
 *
 *		return							Index of the input or -1 if not found
 */
int getInputFromName_{{ model.name }}(fuzzyLogic_{{ model.name }} * fl, char * name);

/*! FIND OUTPUT INDEX GIVEN NAME
 *		input			fl				Fuzzy logic
 *		input			name			Name of the output
 *
 *		return							Index of the output or -1 if not found
 */
int getOutputFromName_{{ model.name }}(fuzzyLogic_{{ model.name }} * fl, char * name);

#endif
