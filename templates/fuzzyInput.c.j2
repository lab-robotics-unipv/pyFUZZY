#include <string.h>
#include "memFunc.h"
#include "fuzzyInput.h"

/*! INIT OF A FUZZY INPUT
 *		output		fi			Fuzzy input to init
 *		input		name		Label of the Fuzzy input
 *		input		MFs			Array of membership functions
 *		input 		nMF			Number of membership functions to be included
 * 		input		min			Minimum value of the Fuzzy Input
 * 		input 		max			Maximum value of the Fuzzy Input
 *
 *		return					Flag: -1 if error, 0 otherwise
 */
int createInput(fuzzyInput * fi, char* name, memFunction * MFs, int nMF, double min, double max) {
	if (fi == NULL) {
		return -1;
	}
	strcpy(fi->name, name);
	
	fi->minValue = min;
	fi->maxValue = max;

	fi->nMF = nMF;
	if (nMF > MAX_N_MF_INPUT) {
		return -1;
	}

	if (MFs == NULL) {
		return -1;
	}
	memcpy(fi->mf, MFs, nMF*sizeof(memFunction));

	return 0;
}

// /*! DEALLOCATION OF A FUZZY INPUT
//  *		input		fuzzy_input		Pointer to a Member Function
//  */
// void killInput(fuzzyInput * fuzzy_input) {
// 	if (fuzzy_input == NULL) {
// 		return;
// 	}
// 	free(fuzzy_input->name);
// 	free(fuzzy_input->mf);
// }

// /*! ADD A FUZZY SET TO A FUZZY INPUT
//  *			input		fuzzy_input		Pointer to a Fuzzy Input struct
//  *			input		memb_funct		Pointer to a Fuzzy Set struct
//  */
// void addFuzzySet(fuzzyInput * fuzzy_input , memFunction * memb_funct){
// 	fuzzy_input -> mf[fuzzy_input -> nMF] = *memb_funct;
// 	fuzzy_input -> nMF ++;
// }

/*! FIND MF GIVEN NAME
 *		input		fuzzy_input		Pointer to the Fuzzy Input struct
 *		input		name			Name of the MF
 *
 *		return						Index of the MF or -1 if not found
 */
int getInputMFFromName(fuzzyInput * fuzzy_input, char * name) {
	int i;
	for (i = 0; i < fuzzy_input->nMF; i++) {
		if ( strcmp(name, fuzzy_input->mf[i].name) == 0 ) {
			return i;
		}
	}
	return -1;
}

/*! CALCULATION OF THE MEMBERSHIP TO A GIVEN FUZZY INPUT
 *			input		fuzzy_input		A Fuzzy Input
 *			input 		inputValue		Value of the input
 * 
 * 			output		output			The % of membership to a Fuzzy Input given an input value		
 */
void getPercentageFromInput(fuzzyInput * fuzzy_input, double inputValue, double * output) {
	if (inputValue < fuzzy_input->minValue) {
		inputValue = fuzzy_input->minValue;
	} else if (inputValue > fuzzy_input->maxValue) {
		inputValue = fuzzy_input->maxValue;
	}
	
	int i;	
	for ( i = 0; i < fuzzy_input->nMF; i++) {
		output[i] = getPercentageNP(fuzzy_input->mf[i], inputValue);		
	}		
}
