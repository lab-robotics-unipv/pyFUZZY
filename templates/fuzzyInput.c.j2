#include <string.h>
#include "memFunc_{{ model.name }}.h"
#include "fuzzyInput_{{ model.name }}.h"

/*! INIT OF A FUZZY INPUT
 *		output		fi			Fuzzy input to init
 *		input		name		Label of the Fuzzy input
 *		input		MFs			Array of membership functions
 *		input 		nMF			Number of membership functions to be included
 * 		input		min			Minimum value of the Fuzzy Input
 * 		input 		max			Maximum value of the Fuzzy Input
 *
 *		return					Flag: -1 if error, 0 otherwise
 */
int_t createInput_{{ model.name }}(fuzzyInput_{{ model.name }} * fi, char* name, memFunction_{{ model.name }} * MFs, uint_t nMF, dataType min, dataType max) {
	if (fi == NULL) {
		return -1;
	}
	strcpy(fi->name, name);
	
	fi->minValue = min;
	fi->maxValue = max;

	fi->nMF = nMF;
	if (nMF > MAX_N_MF_INPUT_{{ model.name }}) {
		return -1;
	}

	if (MFs == NULL) {
		return -1;
	}
	memcpy(fi->mf, MFs, nMF*sizeof(memFunction_{{ model.name }}));

	return 0;
}

/*! FIND INPUT INDEX GIVEN NAME 
 *    input    fi      Fuzzy Input 
 *    input    nInputs    Fuzzy Input 
 *    input    name    Name of the Input 
 * 
 *    return              Index of the Input 
 */ 
int_t getInputFromNameIn_{{ model.name }}(fuzzyInput_{{ model.name }} * fi, uint_t nInputs, char * name) { 
  uint_t i; 
  for ( i = 0 ; i < nInputs ; i++ ) { 
    if ( strcmp(fi[i].name, name) == 0 ) { 
      return i; 
    } 
  }  
    return -1; 
} 

/*! FIND MF GIVEN NAME
 *		input		fuzzy_input		Pointer to the Fuzzy Input struct
 *		input		name			Name of the MF
 *
 *		return						Index of the MF or -1 if not found
 */
int_t getInputMFFromName_{{ model.name }}(fuzzyInput_{{ model.name }} * fuzzy_input, char * name) {
	uint_t i;
	for (i = 0; i < fuzzy_input->nMF; i++) {
		if ( strcmp(name, fuzzy_input->mf[i].name) == 0 ) {
			return i;
		}
	}
	return -1;
}

/*! CALCULATION OF THE MEMBERSHIP TO A GIVEN FUZZY INPUT
 *			input		fuzzy_input		A Fuzzy Input
 *			input 		inputValue		Value of the input
 * 
 * 			output		output			The % of membership to a Fuzzy Input given an input value		
 */
void getPercentageFromInput_{{ model.name }}(fuzzyInput_{{ model.name }} * fuzzy_input, dataType inputValue, dataType * output) {
	if (inputValue < fuzzy_input->minValue) {
		inputValue = fuzzy_input->minValue;
	} else if (inputValue > fuzzy_input->maxValue) {
		inputValue = fuzzy_input->maxValue;
	}
	
	uint_t i;	
	for ( i = 0; i < fuzzy_input->nMF; i++) {
		output[i] = getPercentage_{{ model.name }}(&(fuzzy_input->mf[i]), inputValue);		
	}		
}
