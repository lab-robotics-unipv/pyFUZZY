#ifndef FUZZY_OUTPUT_{{ model.name }}_H
#define FUZZY_OUTPUT_{{ model.name }}_H

#include <stdint.h>

#include "definitions.h"
#include "memFunc.h"

#ifndef MAX_L_NAME_{{ model.name }}
#error "MAX_L_NAME_{{ model.name }} not defined: check definitions_{{ model.name }}.h"
#endif

#ifndef MAX_N_MF_OUTPUT_{{ model.name }}
#error "MAX_N_MF_{{ model.name }} not defined: check definitions_{{ model.name }}.h"
#endif

//! FUZZY OUTPUT STRUCTURE
typedef struct {
	char name[MAX_L_NAME_{{ model.name }}];		//!< Name of the output
	memFunction_{{ model.name }} mf[MAX_N_MF_OUTPUT_{{ model.name }}];	//!< List of the Member Functions
	uint_t nMF;					//!< Number of MF
} fuzzyOutput_{{ model.name }};

/*! INIT OF A FUZZY OUTPUT
 *		output		fo			Fuzzy output to init
 *		input		name		Label of the Fuzzy output
 *		input		MFs			Array of membership functions
 *		input 		nMF			Number of membership functions to be included
 *
 *		return					Flag: -1 if error, 0 otherwise
 */
int_t createOutput_{{ model.name }}(fuzzyOutput_{{ model.name }} * fo, char* name, memFunction_{{ model.name }} * MFs, uint_t nMF);

/*! FIND OUTPUT INDEX GIVEN NAME 
 *    input      fo        Fuzzy 
 *    input      name      Name of the output 
 * 
 *    return              Index of the output, -1 if not found 
 */ 
int_t getOutputFromNameOu_{{ model.name }}(fuzzyOutput_{{ model.name }} * fo, uint_t nOutput, char * name); 

/*! FIND MF GIVEN NAME
 *		input		fuzzy_output	Pointer to the Fuzzy Output struct
 *		input		name			Name of the MF
 *
 *		return						Index of the MF or -1 if not found
 */
int_t getOutputMFFromName_{{ model.name }}(fuzzyOutput_{{ model.name }} * fuzzy_output, char * name);

#endif
