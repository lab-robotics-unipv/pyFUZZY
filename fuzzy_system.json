{
    "MembershipTest": {
        "version": "1.0alpha",
        "description": "Example fuzzy model, not really working, to test this new file format",
	"type": "f-ind",
        "fuzzify": {
            "inVar1": {
                "description": "Example of variable made by pairwise linear membership functions",
                "membership_functions": {
                    "poor": { "type": "pairwise-linear",  "param": [[0, 1], [2, 1], [4, 0]] }, 
                    "good": { "type": "pairwise-linear",  "param": [[1, 0], [2, 0.5], [3, 0.7], [4, 1], [4.5, 1], [5, 0.6], [6, 0.3], [7, 0.3], [8, 0.8], [9, 0.8], [10, 0]] }, 
                    "excellent": { "type": "pairwise-linear",  "param": [[6, 0], [9, 1], [10, 1]] }
                }
            },
            "inVar2": {
                "membership_functions": {
                    "poor": { "type": "triangle", "param": [0, 2.5, 5] },
                    "good": { "type": "triangle", "param": [2.5, 5, 7.5] },
                    "excellent": { "type": "triangle", "param": [5, 7.5, 10] }
                }
            },
            "inVar3": {
                "membership_functions": {
                    "poor": { "type": "trapezoid", "param": [0, 2, 3, 4] },
                    "good": { "type": "trapezoid", "param": [3, 4, 5, 6] },
                    "excellent": { "type": "trapezoid", "param": [5, 6, 7, 8] }
                }
            },
            "inVar4": {
                "membership_functions": {
                    "poor": { "type": "gaussian-bell", "param": [ 2, 4, 2 ] },
                    "good": { "type": "gaussian-bell", "param": [ 2, 4, 5 ] },
                    "excellent": { "type": "gaussian-bell", "param": [ 2, 4, 8 ] }
                }
            },
            "inVar5": {
                "membership_functions": {
                    "poor": { "type": "gaussian", "param": [ 2, 2 ] },
                    "good": { "type": "gaussian", "param": [ 5, 2 ] },
                    "excellent": { "type": "gaussian", "param": [ 8, 2 ] }
                }
            },
            "inVar5_1": {
                "membership_functions": {
                    "poor": { "type": "gaussian2", "param": [ 2, 2, 3, 1 ] },
                    "good": { "type": "gaussian2", "param": [ 5, 2, 6, 3 ] },
                    "excellent": { "type": "gaussian2", "param": [ 8, 2, 12, 5 ] }
                }
            },
            "inVar6": {
                "membership_functions": {
                    "poor": { "type": "sigmoid", "param": [ -4, 3 ] },
                    "good": { "type": "sigmoid", "param": [ 4, 7 ] }
                }
            },
            "inVar7": {
                "membership_functions": {
                    "poor": { "type": "singleton", "param": 2 },
                    "good": { "type": "singleton", "param": 5 },
                    "excellent": { "type": "singleton", "param": 8 }
                }
            },
            "inVar7": {
                "description": "Generalized singleton",
                "membership_functions": {
                    "poor": { "type": "singleton", "param": 2 },
                    "good": { "type": "singleton", "param": 5 },
                    "excellent": { "type": "singleton", "param": 8 }
                }
            },
            "inVar8": {
                "description": "Mixed types",
                "membership_functions": {
                    "t1": { "type": "pairwise-linear", "param": [[1, 0], [2, 0.5], [3, 0.7], [4,1], [4.5, 1], [5, 0.6], [6, 0.3], [7, 0.3], [8, 0.8], [9, 0.8], [10,0]] },
                    "t2": { "type": "triangle", "param": [ 12, 14, 16 ] },
                    "t3": { "type": "trapezoid", "param": [ 18, 20, 24, 28 ] },
                    "t4": { "type": "gaussian-bell", "param": [ 2, 4, 30 ] },
                    "t5": { "type": "gaussian", "param": [ 35, 2 ] },
                    "t6": { "type": "sigmoid", "param": [ 4, 40 ] }
                }
            }
        }
    },
    "robot": {
        "version": "1.0alpha",
	"type": "fis",
        "fuzzify": {
            "rd": {
                "description": "Right Distance",
                "membership_functions": {
                    "L": { "type": "triangle", "param": [0, 0, 1] },
                    "M": { "type": "triangle", "param": [0, 1, 2] },
                    "H": { "type": "triangle", "param": [1, 2, 3] },
                    "VH": { "type": "triangle", "param": [2, 3, 3] }
                }
            },
            "dq": {
                "description": "Distance Quotient",
                "membership_functions": {
                    "L": { "type": "triangle", "param": [0, 0, 2] },
                    "H": { "type": "triangle", "param": [0, 2, 2] }
                }
            },
            "or": {
                "description": "Orientation",
                "membership_functions": {
                    "HL": { "type": "triangle", "param": [-45, -45, -22.5] },
                    "LL": { "type": "triangle", "param": [-45, -22.5, 0] },
                    "Z": { "type": "triangle", "param": [-22.5, 0, 22] },
                    "LR": { "type": "triangle", "param": [0, 22.5, 45] },
                    "HR": { "type": "triangle", "param": [22.5, 45, 45] }
                }
            },
            "v": {
                "description": "Velocity",
                "membership_functions": {
                    "L": { "type": "triangle", "param": [0, 0, 1] },
                    "H": { "type": "triangle", "param": [0, 1, 1] }
                }
            }
	},
        "defuzzify": {
            "la": {
                "method": "COG",
		"default": 0,
                "membership_functions": {
                    "VHB": { "type": "triangle", "param": [0, 2, 3, 4] },
                    "VHB": { "type": "triangle", "param": [-1, -1, -0.75] },
                    "HB": { "type": "triangle", "param": [-1, -0.75, -0.5] },
                    "MB": { "type": "triangle", "param": [-0.75, -0.5, -0.25] },
                    "SB": { "type": "triangle", "param": [-0.5, -0.25, 0] },
                    "Z": { "type": "triangle", "param": [-0.25, 0, 0.25] },
                    "SA": { "type": "triangle", "param": [0, 0.25, 0.5] },
                    "MA": { "type": "triangle", "param": [0.25, 0.5, 0.75] },
                    "HA": { "type": "triangle", "param": [0.5, 0.75, 1] },
                    "VHA": { "type": "triangle", "param": [0.75, 1, 1] }
                }
            },
            "av": {
                "method": "COG",
		"default": 0,
                "membership_functions": {
                    "VHR": { "type": "triangle", "param": [-1, -1, -0.75] },
                    "HR": { "type": "triangle", "param": [-1, -0.75, -0.5] },
                    "MR": { "type": "triangle", "param": [-0.75, -0.5, -0.25] },
                    "SR": { "type": "triangle", "param": [-0.5, -0.25, 0] },
                    "Z": { "type": "triangle", "param": [-0.25, 0, 0.25] },
                    "SL": { "type": "triangle", "param": [0, 0.25, 0.5] },
                    "ML": { "type": "triangle", "param": [0.25, 0.5, 0.75] },
                    "HL": { "type": "triangle", "param": [0.5, 0.75, 1] },
                    "VHL": { "type": "triangle", "param": [0.75, 1, 1] }
                }
            }
        },
        "rules_set": {
            "and": "min",
            "activation": "min",
            "accumulation": "max",
            "rules": [
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "L"], "and", ["or", "is", "LL"], "and", ["v", "is", "L"]],
                    "then": [["la", "VHB"], ["av", "VHR", 0.4610]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "L"], "and", ["or", "is", "LL"], "and", ["v", "is", "H"]],
                    "then": [["la", "VHB"], ["av", "VHR", 0.4896]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "L"], "and", ["or", "is",  "Z"], "and", ["v", "is", "L"]],
                    "then": [["la", "Z"], ["av", "MR", 0.6664]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "L"], "and", ["or", "is",  "Z"], "and", ["v", "is", "H"]],
                    "then": [["la", "HB"], ["av", "SR", 0.5435]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "H"], "and", ["or", "is", "LL"], "and", ["v", "is", "L"]],
                    "then": [["la", "MA"], ["av", "HR", 0.7276]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "H"], "and", ["or", "is",  "Z"], "and", ["v", "is", "L"]],
                    "then": [["la", "MA"], ["av", "HL", 0.4845]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "H"], "and", ["or", "is",  "Z"], "and", ["v", "is", "H"]],
                    "then": [["la", "HB"], ["av", "ML", 0.5023]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "H"]],
                    "then": [["la", "VHB"], ["av", "VHL", 0.7363]]
		},
		{
                    "if": [["rd", "is", "L"], "and", ["dq", "is", "H"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "VHB"], ["av", "VHL", 0.9441]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "L"], "and", ["or", "is",  "Z"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "HR", 0.3402]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "L"], "and", ["or", "is", "LR"], "and", ["v", "is", "H"]],
                    "then": [["la", "Z"], ["av", "VHL", 0.4244]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "L"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "SA"], ["av", "HL", 0.5472]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "L"], "and", ["or", "is", "HR"], "and", ["v", "is", "H"]],
                    "then": [["la", "MB"], ["av", "VHL", 0.4369]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "HL"], "and", ["v", "is", "L"]],
                    "then": [["la", "Z"], ["av", "VHR", 0.1770]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "HL"], "and", ["v", "is", "H"]],
                    "then": [["la", "VHB"], ["av", "VHR", 0.4526]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "LL"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "VHR", 0.2548]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is",  "Z"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "Z", 0.2084]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHL", 0.6242]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "VHL", 0.3779]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "Z"], ["av", "VHL", 0.6931]]
		},
		{
                    "if": [["rd", "is", "M"], "and", ["dq", "is", "H"], "and", ["or", "is", "HR"], "and", ["v", "is", "H"]],
                    "then": [["la", "VHB"], ["av", "VHL", 0.7580]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "L"], "and", ["or", "is",  "Z"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHR", 0.5758]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "L"], "and", ["or", "is", "LR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "MR", 0.2513]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "L"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHL", 0.5471]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "L"], "and", ["or", "is", "HR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "HL", 0.5595]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "HL"], "and", ["v", "is", "L"]],
                    "then": [["la", "VHB"], ["av", "VHR", 0.9999]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "HL"], "and", ["v", "is", "H"]],
                    "then": [["la", "VHB"], ["av", "VHR", 0.9563]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "LL"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHR", 0.9506]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is",  "Z"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHR", 0.4529]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is",  "Z"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "VHR", 0.2210]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "MR", 0.3612]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "MR", 0.2122]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "HL", 0.7878]]
		},
		{
                    "if": [["rd", "is", "H"], "and", ["dq", "is", "H"], "and", ["or", "is", "HR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "VHL", 0.3859]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "L"], "and", ["or", "is", "LR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHR", 0.5530]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "L"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "HR", 0.4223]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "L"], "and", ["or", "is", "HR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "HR", 0.3854]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "H"], "and", ["or", "is", "LL"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHR", 0.0936]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "VHR", 0.7325]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "H"], "and", ["or", "is", "LR"], "and", ["v", "is", "H"]],
                    "then": [["la", "SA"], ["av", "VHR", 0.5631]]
		},
		{
                    "if": [["rd", "is", "VH"], "and", ["dq", "is", "H"], "and", ["or", "is", "HR"], "and", ["v", "is", "L"]],
                    "then": [["la", "HA"], ["av", "HR", 0.5146]]
		}
            ]
        }
    }
}

